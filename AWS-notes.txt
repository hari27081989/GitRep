AWS
===
Cloud Computing:
Cloud computing is the on-demand delivery of compute power, database, storage, applications, and other IT resources via the internet with pay-as-you-go pricing

Amazon EC2 is hosted across multiple locations world-wide,these locaions are composed of Regions and Availability zones
Each Region is a geographical area. Each Region has multiple isolated locaions called Availability zones
Each Region is completely Independent , Each AZ is isolated, but AZ's in a region are connected thrugh low-latency links
Each Amazon EC2 Region is designed to be completely isolated from the other Amazon EC2 Regions. This achieves the greatest possible fault tolerance and stability. 
When you view your resources, you'll only see the resources tied to the Region you've specified. This is because Regions are isolated from each other, 
and we don't replicate resources across Regions automatically
When you launch an instance, you must select an AMI that's in the same Region. If the AMI is in another Region, you can copy the AMI to the Region you're using

Amazon EC2:Elastic Cloud Compute
EC2 provides scalable computing capacity in AWS cloud
EC2 resources are either global, tied to a region or tied to an AZ
Eliminates need to invest in hardware, so you can develop and deploy apps faster
you can launch as many/few virtual servers as you need,configure security/network/storage

EC2 provides below features:
   Virutal compuing environments called Instances
   Preconfigured templates for your instances called AMI's
   Various configurations of CPU/MEM/Network/STORAGE for your instances known as Instance types
   Secure login information for your instances using key pairs (AWS stores public keys,you store private key)
   Storage volumes for your temporary data thats deleted when you stop/terminate instance known as Instance Store Volumes
	Persistent storage volumes for your data using Amazon Elastic Block Store (Amazon EBS) Amazon EBS Volumes
	Multiple physical locaitons for your resources such as instances and EBS volumes known as Regions and Availability Zones
	A firewall that enables you to specify protocols/ports and source IP's ranges that can reach your instances using security groups
	Static IPV4 addressess for your dynamic cloud computing called Elastic IP addresses
	Metadat known as tags that you can create and assign to your Amazon EC2 resources
	Virtual networks that you can create that are logically isolcated from the rest of the AWS cloud and you can optionally connect to your own n/w
	known as Virtual Private Cloud (VPC's)
	


AWS has regions all around the world.
Each Region has availability zones 
Each availability zone(AZ) is a physical data center in the region.
AWS consoles are region scoped (except IAM and S3)

IAM:
---

----
EC2- Instances Types:

R:apps that needs lot of RAM - in memory caches
C:apps that needs good CPU - compute/databses (ex: Big data)
M: (Medium)Between RAM and CPU  - genral webapp
I: I/O - Apps that need good local I/O(Internal storage) - databses
G:Apps that need a good GPU - Video rendering/Machine Learning
T2/T3: burstable instances (up to capacity)
T2/T3: unlimited:unlimited burst
-------------------------
AMI: An Image to use to create our own instances.
advantages of AMI:
Preinstalled packages
Faster boot time(No need for ec2 user data at boot time)
Machine comes with Monitoring/enterprise software
Security concerns
Control of maintenance and updates of AMI's over time
Active Directory Integration out of the box
Installing your app ahead of time(faster deploy)
Using someone else's AMI that is optimised for running APP and DB
AMI are specific for a region

Public AMI: You can use other people's AMI's or rent other's AMI's

AMI can be found and published in Amazon Market Place

AMI Storage:
AMI takes place and live in Amazon S3

Amazon S3 is a durable,cheap and resilient storage where most of your backups will live (but you wont see them in S3 console)

By default, your AMI's are private locked for your region/account
You can make AMI public and share with other AWS accounts or sell them on AMI Market place.
-----------------------------
Placement Groups:
Sometimes we want control over EC2 instances in our AWS env and it can be defined using Placement Groups.
3 Strategies during creation of Placement Groups  
	Cluster:Clusters instances into low-latency group in a single AZ, It gives high performance and high risk)
			Same Rack and Same AZ
			Great network(10GBPS bandwidth between instances)
			If the Rack fails all the instances fails
			Used in Big Data job that needs to complete fast, app that needs extremely low-latency and high n/w throughput.
	Spread:Spreads instances across underlying hardware (max 7 instances per group per AZ) - critical apps
			Can span across AZ's
			Reduced risk is simultaneous failure
			EC2 instances are different physical hardware
			Limited to 7 instances per group per AZ
			Used in, Apps that needs max high availability, Critical instances where each one should be isolated
	Partition: Spreads instances acrosse many different partitions(which rely on different sets of racks) within an AZ. Scales to 100's of instances per group
			Up to 7 partitions per AZ
			Up to 100s of EC2 Instances
			Instances in a partition do not share Rack with the instancesces in other partitions
			A partition failure can affect many instances but wont affect other paritions
			EC2 instances get access to partition information as metadata
			UseCases:HDFS,HBASE,Cassandra,Kafka
=============================================================
Scalability:
Vertical Scaling ( Increasing the size of the instance)
From: t2 nano - 0.5G of RAM, 1 vCPU
To: u-l2tbl.metal - 12.3 TB of RAM, 448 vCPUs
Horizontal Scaling (Increase number of instances)
High Availability: Run instances for same applicaitons across multi AZ
----------------------------------------
Load Balancing
 Takes traffic from internet and directs to Instances
 Exposes single point of contact (DNS) to your applicaitons
 Handles failures of instances
 do regular healthchecks to your instances
 Provide SSL termination(HTTPS) to your websites
 Enforce stickiness with cookies
 High availability across zones
 Seperate public traffic from private traffic
 
 ELB:(EC2 Load Blancer) is a managed load balancer
 
 3 kinds of Load Balancer
 
 Classic Load balancer (v1 -old generation) - 2009
 Application Load Balancer ( V2 - new generation) - 2016
 Network Load Balancer ( V2 - new generation) - 2017
 newer v2 generations are recommended as they provide more features
 You can setup internal(private) or external(public) ELB's
 
 Health Checks:
 Health Checks are crucial for Load Balancers
 Health check is done on a Port and a Route (/health is common)
 If response is 200 then ok, else not ok
 
 Application Load Balancer (V2): For HTTP Traffic
 Applicaiton Load Balancer (layer 7) allow to do :
	Load balancing to multiple applicaitons across machines(target groups)
	Load balacing to multiple applicaitons on the same machine(ex: Containers)
	Load balancing based on the route in URL
	based on the hostname in URL
  They are awsome for micro services and container based applicaitons(ex: Docer , Amazon ECS)
  Has a port mapping feature to redirect to any dynamic port
  In comparision we would need to create one classic Load balancer per applicaiton before, which is very expensive
  Stickiness can be enabled at the target group level
	Same request goes to the same instance
	Stickiness is directly generated by ALB(not the application)
  ALB Supports HTTP/HTTPS & WebSockets protocols
  Applicaiton servers dont see the IP of the client directly - Applications  see the private IP of the LB
  The true IP of the client is intserted in the header X-Forwarder-For. Application need to see this to get the private IP of client.
  
 Network Load Balancer (Layer 4): For TCP traffic

     Forward TCP traffic to your instancesces
	 Hanldes millions of request per second - Higher performance
	 Supports static/elastic IP
	 Less Latency ~ 100 ms (400 ms for ALB)
   Mostly used for Higher performance and should not be the default LB you choose

Load Balancer - Good to know:
Classic LB's are deprecated
CLB and ALB support SSL certificates and provide SSL termination
All LB's have health check capability
ALB can route based on hostname / path
ALB is great fit with ECS/Docker
Any LB(CLB,ALB,NLB) has a static hostname, Do not resolve and use underlying IP
LB's can scale but not instantaneously - contact AWS for a warm-up
NLB directly see's the client IP
4xx errors are client induced erros
5xx errors are applicaiton induced errors
     ex: LB error 503 means at capacity or not registered taraget
If the LB's cant connect to your applicaiton, check your security groups


   
 
  


 
 
			
			
	


